#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require "find_github_email"

begin
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: find_github_email [options] <username>\n\n" \
      "GitHub access token must be set to find a user's email address.\n" \
      "For instructions on how to create a GitHub access token, " \
      "see <>\n\n"

    opts.on(
      "-g GITHUB_ACCESS_TOKEN",
      "--github-access-token GITHUB_ACCESS_TOKEN",
      "Set GitHub access token. Only needs to be set once!"
    ) do |access_token|
      FindGithubEmail::GithubAccessToken.github_access_token = (access_token)
      exit if ARGV.empty? && !options[:username]
    end

    opts.on(
      "-u USERNAME",
      "--username USERNAME",
      "Find GitHub email for username. " \
      "Also accepted as the last argument without a flag"
    ) { |username| options[:username] = username }

    opts.on("-v", "--verbose", "Wordier output") do
      options[:verbose] = true
    end

    opts.on("-h", "--help", "Prints this help") do |_|
      puts opts
      exit
    end
  end.parse!

  username = options[:username] || ARGV[0]

  raise FindGithubEmail::Errors::NoUsernameProvided unless username

  found_emails = FindGithubEmail::Finder.find(username)

  output = found_emails.join("\n")

  if options[:verbose]
    if found_emails.size > 1
      plural = "es"
      article = "these"
    else
      article = "an"
    end

    output =
      "Found #{article} email address#{plural} on GitHub for #{username}:\n" +
      output
  end

  puts output
rescue FindGithubEmail::Errors::Error => e
  abort(e.message)
end
